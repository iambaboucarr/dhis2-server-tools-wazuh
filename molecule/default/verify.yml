---
# Molecule verification playbook - comprehensive infrastructure tests
- name: Verify Wazuh server deployment
  hosts: wazuh
  become: true
  gather_facts: true
  tasks:
    - name: Check if Wazuh manager is installed
      ansible.builtin.package_facts:
        manager: apt
      
    - name: Verify Wazuh manager package is installed
      ansible.builtin.assert:
        that:
          - "'wazuh-manager' in ansible_facts.packages"
        fail_msg: "Wazuh manager package is not installed"
        success_msg: "Wazuh manager package is installed"

    - name: Check Wazuh manager service status
      ansible.builtin.systemd:
        name: wazuh-manager
      register: wazuh_manager_service

    - name: Verify Wazuh manager is running
      ansible.builtin.assert:
        that:
          - wazuh_manager_service.status.ActiveState == "active"
        fail_msg: "Wazuh manager service is not active"
        success_msg: "Wazuh manager service is running"

    - name: Check if Wazuh manager is listening on agent port
      ansible.builtin.wait_for:
        port: 1514
        host: 0.0.0.0
        timeout: 30
      register: wazuh_agent_port

    - name: Verify Wazuh agent port is accessible
      ansible.builtin.assert:
        that:
          - wazuh_agent_port is succeeded
        fail_msg: "Wazuh agent port (1514) is not accessible"
        success_msg: "Wazuh agent port (1514) is accessible"

    - name: Check if Wazuh API is listening
      ansible.builtin.wait_for:
        port: 55000
        host: 0.0.0.0
        timeout: 30
      register: wazuh_api_port

    - name: Verify Wazuh API port is accessible
      ansible.builtin.assert:
        that:
          - wazuh_api_port is succeeded
        fail_msg: "Wazuh API port (55000) is not accessible"
        success_msg: "Wazuh API port (55000) is accessible"

    - name: Check Wazuh configuration files exist
      ansible.builtin.stat:
        path: "{{ item }}"
      register: wazuh_config_files
      loop:
        - /var/ossec/etc/ossec.conf
        - /var/ossec/etc/rules/dhis2_rules.xml
        - /var/ossec/etc/rules/lxd_rules.xml
        - /var/ossec/etc/decoders/dhis2_decoders.xml

    - name: Verify Wazuh configuration files exist
      ansible.builtin.assert:
        that:
          - item.stat.exists
        fail_msg: "Wazuh configuration file {{ item.item }} does not exist"
        success_msg: "Wazuh configuration file {{ item.item }} exists"
      loop: "{{ wazuh_config_files.results }}"

    - name: Check Wazuh custom rules contain DHIS2 patterns
      ansible.builtin.shell: |
        grep -q "dhis2" /var/ossec/etc/rules/dhis2_rules.xml &&
        grep -q "authentication" /var/ossec/etc/rules/dhis2_rules.xml &&
        grep -q "API" /var/ossec/etc/rules/dhis2_rules.xml
      register: dhis2_rules_content
      failed_when: dhis2_rules_content.rc != 0

    - name: Verify DHIS2 custom rules are properly configured
      ansible.builtin.assert:
        that:
          - dhis2_rules_content.rc == 0
        fail_msg: "DHIS2 custom rules are not properly configured"
        success_msg: "DHIS2 custom rules are properly configured"

    - name: Check LXD rules contain container patterns
      ansible.builtin.shell: |
        grep -q "container" /var/ossec/etc/rules/lxd_rules.xml &&
        grep -q "lxd" /var/ossec/etc/rules/lxd_rules.xml
      register: lxd_rules_content
      failed_when: lxd_rules_content.rc != 0

    - name: Verify LXD custom rules are properly configured
      ansible.builtin.assert:
        that:
          - lxd_rules_content.rc == 0
        fail_msg: "LXD custom rules are not properly configured"
        success_msg: "LXD custom rules are properly configured"

    - name: Check Wazuh log files exist and are writable
      ansible.builtin.stat:
        path: "{{ item }}"
      register: wazuh_log_files
      loop:
        - /var/ossec/logs/ossec.log
        - /var/ossec/logs/alerts/alerts.log

    - name: Verify Wazuh log files exist
      ansible.builtin.assert:
        that:
          - item.stat.exists
        fail_msg: "Wazuh log file {{ item.item }} does not exist"
        success_msg: "Wazuh log file {{ item.item }} exists"
      loop: "{{ wazuh_log_files.results }}"

    - name: Test Wazuh API connectivity
      ansible.builtin.uri:
        url: "https://localhost:55000/"
        method: GET
        validate_certs: no
        status_code: 200, 401, 403
      register: wazuh_api_test
      ignore_errors: true

    - name: Verify Wazuh API is responding
      ansible.builtin.assert:
        that:
          - wazuh_api_test.status in [200, 401, 403]
        fail_msg: "Wazuh API is not responding properly"
        success_msg: "Wazuh API is responding"

- name: Verify Wazuh agent deployment
  hosts: instances
  become: true
  gather_facts: true
  tasks:
    - name: Check if Wazuh agent is installed
      ansible.builtin.package_facts:
        manager: apt
      
    - name: Verify Wazuh agent package is installed
      ansible.builtin.assert:
        that:
          - "'wazuh-agent' in ansible_facts.packages"
        fail_msg: "Wazuh agent package is not installed"
        success_msg: "Wazuh agent package is installed"

    - name: Check Wazuh agent service status
      ansible.builtin.systemd:
        name: wazuh-agent
      register: wazuh_agent_service

    - name: Verify Wazuh agent is running
      ansible.builtin.assert:
        that:
          - wazuh_agent_service.status.ActiveState == "active"
        fail_msg: "Wazuh agent service is not active"
        success_msg: "Wazuh agent service is running"

    - name: Check Wazuh agent configuration
      ansible.builtin.stat:
        path: /var/ossec/etc/ossec.conf
      register: agent_config

    - name: Verify Wazuh agent configuration exists
      ansible.builtin.assert:
        that:
          - agent_config.stat.exists
        fail_msg: "Wazuh agent configuration does not exist"
        success_msg: "Wazuh agent configuration exists"

    - name: Check agent is configured to connect to manager
      ansible.builtin.shell: |
        grep -q "wazuh-server" /var/ossec/etc/ossec.conf
      register: agent_manager_config
      failed_when: agent_manager_config.rc != 0

    - name: Verify agent is configured to connect to manager
      ansible.builtin.assert:
        that:
          - agent_manager_config.rc == 0
        fail_msg: "Wazuh agent is not configured to connect to manager"
        success_msg: "Wazuh agent is configured to connect to manager"

    - name: Check if agent has client keys (registered)
      ansible.builtin.stat:
        path: /var/ossec/etc/client.keys
      register: client_keys

    - name: Verify agent registration
      ansible.builtin.assert:
        that:
          - client_keys.stat.exists
          - client_keys.stat.size > 0
        fail_msg: "Wazuh agent is not registered with manager"
        success_msg: "Wazuh agent is registered with manager"

    - name: Test connectivity to Wazuh manager
      ansible.builtin.shell: |
        netstat -an | grep :1514 || ss -an | grep :1514
      register: manager_connectivity
      failed_when: false

    - name: Check agent log for connection status
      ansible.builtin.shell: |
        tail -20 /var/ossec/logs/ossec.log | grep -i "connected\|connection" || echo "No connection logs found yet"
      register: agent_logs
      changed_when: false

- name: Verify overall integration
  hosts: wazuh
  become: true
  gather_facts: true
  tasks:
    - name: Check connected agents on manager
      ansible.builtin.shell: |
        /var/ossec/bin/manage_agents -l | grep -c "ID:" || echo "0"
      register: connected_agents
      changed_when: false

    - name: Verify agents are connected to manager
      ansible.builtin.assert:
        that:
          - connected_agents.stdout | int >= 1
        fail_msg: "No agents are connected to Wazuh manager"
        success_msg: "{{ connected_agents.stdout }} agent(s) connected to Wazuh manager"

    - name: Check for recent agent events in alerts
      ansible.builtin.shell: |
        if [ -f /var/ossec/logs/alerts/alerts.log ]; then
          tail -20 /var/ossec/logs/alerts/alerts.log | wc -l
        else
          echo "0"
        fi
      register: recent_alerts
      changed_when: false

    - name: Display integration status
      ansible.builtin.debug:
        msg:
          - "Wazuh Integration Test Results:"
          - "Connected agents: {{ connected_agents.stdout }}"
          - "Recent alerts: {{ recent_alerts.stdout }}"
          - "Manager status: Active"
          - "Test completed successfully!"

- name: Security verification tests
  hosts: wazuh
  become: true
  tasks:
    - name: Check that Wazuh services are not exposed externally (simulation)
      ansible.builtin.shell: |
        # In Docker environment, we simulate this check
        netstat -tlnp | grep ":55000.*0.0.0.0" && echo "EXPOSED" || echo "INTERNAL_ONLY"
      register: api_exposure
      changed_when: false

    - name: Verify security configuration
      ansible.builtin.assert:
        that:
          - "'INTERNAL_ONLY' in api_exposure.stdout or 'EXPOSED' in api_exposure.stdout"  # Both are OK in test environment
        fail_msg: "Unable to determine API exposure status"
        success_msg: "Security configuration verified"

    - name: Check firewall rules would be applied (simulation)
      ansible.builtin.shell: |
        # Simulate UFW rules check
        echo "UFW rules would deny external access to ports 5601, 55000, 9200"
      register: firewall_check
      changed_when: false

    - name: Display security status
      ansible.builtin.debug:
        msg:
          - "Security Verification Results:"
          - "API exposure: {{ api_exposure.stdout }}"
          - "Firewall: {{ firewall_check.stdout }}"