---
name: Molecule Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scenarios:
        description: 'Comma-separated list of scenarios to run (default: all)'
        required: false
        default: 'default,wazuh'
      verbose:
        description: 'Enable verbose output'
        required: false
        default: 'false'
        type: boolean

env:
  PYTHON_VERSION: '3.11'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements-test.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-test.txt

      - name: Lint Ansible playbooks
        run: |
          ansible-lint deploy/*.yml molecule/*/converge.yml molecule/*/verify.yml

      - name: Lint YAML files
        run: |
          yamllint -c .yamllint deploy/ molecule/

      - name: Validate Ansible syntax
        run: |
          cd deploy
          ansible-playbook --syntax-check dhis2.yml
          ansible-playbook --syntax-check wazuh.yml

  molecule-test:
    name: Molecule Test
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        scenario:
          - default
          - wazuh
          # - full-stack  # Commented out for resource constraints in CI
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements-test.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-test.txt

      - name: Install Ansible collections
        run: |
          ansible-galaxy install -r requirements.yml

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start Docker service
        run: |
          sudo systemctl start docker
          docker --version

      - name: Run Molecule test for ${{ matrix.scenario }}
        run: |
          molecule test -s ${{ matrix.scenario }}
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
          MOLECULE_NO_LOG: 'false'

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: molecule-test-results-${{ matrix.scenario }}
          path: |
            molecule/${{ matrix.scenario }}/molecule.log
            **/*junit*.xml
            **/*results*.xml

  integration-test:
    name: Integration Test
    needs: molecule-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-test.txt

      - name: Run integration tests
        run: |
          # Run the comprehensive validation script
          cd deploy
          ../test/validate-deployment.sh

      - name: Run custom validation tests
        run: |
          # Run custom test suite
          pytest tests/ -v --junit-xml=integration-test-results.xml
        continue-on-error: true

      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results
          path: |
            integration-test-results.xml
            test-reports/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Scan Ansible files with ansible-lint security rules
        run: |
          pip install ansible-lint
          ansible-lint --profile security deploy/ || true

  report:
    name: Test Report
    needs: [molecule-test, integration-test]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Download test artifacts
        uses: actions/download-artifact@v3
        with:
          path: test-results

      - name: Generate test report
        run: |
          echo "# DHIS2 + Wazuh Integration Test Report" > test-report.md
          echo "" >> test-report.md
          echo "## Test Results Summary" >> test-report.md
          echo "" >> test-report.md
          
          # Check if tests passed
          if [ -d "test-results" ]; then
            echo "✅ Molecule tests completed" >> test-report.md
            echo "✅ Integration tests completed" >> test-report.md
          else
            echo "❌ Tests failed or were skipped" >> test-report.md
          fi
          
          echo "" >> test-report.md
          echo "## Scenarios Tested" >> test-report.md
          echo "- default: Basic Wazuh + DHIS2 integration" >> test-report.md
          echo "- wazuh: Wazuh security monitoring integration" >> test-report.md
          echo "" >> test-report.md
          echo "Generated on: $(date)" >> test-report.md

      - name: Upload test report
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: test-report.md

  notify:
    name: Notify
    needs: [molecule-test, integration-test, security-scan]
    runs-on: ubuntu-latest
    if: always() && (github.event_name == 'push' || github.event_name == 'schedule')
    
    steps:
      - name: Notify on success
        if: needs.molecule-test.result == 'success' && needs.integration-test.result == 'success'
        run: |
          echo "✅ All DHIS2 + Wazuh integration tests passed!"
          
      - name: Notify on failure
        if: needs.molecule-test.result == 'failure' || needs.integration-test.result == 'failure'
        run: |
          echo "❌ DHIS2 + Wazuh integration tests failed!"
          exit 1